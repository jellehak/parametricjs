{"version":3,"sources":["webpack://Parametric/webpack/bootstrap","webpack://Parametric/./src/index.js","webpack://Parametric/./src/lib.js","webpack://Parametric/./src/helpers/slugify.js","webpack://Parametric/./src/settings.js","webpack://Parametric/./src/web/ThreeCSG/ThreeCSG.es6","webpack://Parametric/./src/features/insert.js","webpack://Parametric/./src/features/plane.js","webpack://Parametric/./src/helpers/PathToShape.js","webpack://Parametric/./src/features/materials/mesh.js","webpack://Parametric/./src/features/extrude.js","webpack://Parametric/./src/features/pattern.js","webpack://Parametric/./src/helpers/isString.js","webpack://Parametric/./src/features/materials/lines.js","webpack://Parametric/./src/features/sketchPath.js","webpack://Parametric/./src/features/sketchArray.js","webpack://Parametric/./src/features/sketchPoint.js","webpack://Parametric/./src/features/sketchCircle.js","webpack://Parametric/./src/features/sketch.js","webpack://Parametric/./src/features/cut.js","webpack://Parametric/./src/features/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","_lib__WEBPACK_IMPORTED_MODULE_0__","args","_features__WEBPACK_IMPORTED_MODULE_0__","_settings__WEBPACK_IMPORTED_MODULE_1__","_helpers_slugify__WEBPACK_IMPORTED_MODULE_2__","_web_ThreeCSG_ThreeCSG_es6__WEBPACK_IMPORTED_MODULE_3__","THREE","window","cad","scene","debug","cadData","object3d","Object3D","self","this","render","_cadData","console","warn","compileParameters","features","map","feature","suppress","mesh","processFeature","add","title","getFeature","type","payload","ycad","ThreeBSP","handler","err","log","getFeatureById","id","filter","elem","getPartById","parts","getParameters","parameters","getFeatureLabels","ret","k","part","data","selectInnerPart","featureLabels","getFeatureLabelsOneLevel","push","label","children","getParametersDefault","default","compiled","_parameters","change","varname","splice","compile","what","eval","assign","settings","slugify","text","toString","toLowerCase","replace","sketchFill","EPSILON","COPLANAR","FRONT","BACK","SPANNING","constructor","geometry","_length_i","face","vertex","faceVertexUvs","uvs","polygon","polygons","Polygon","Vertex","Node","Geometry","matrix","Matrix4","Mesh","tree","updateMatrix","clone","faces","length","Face3","vertices","a","Vector2","x","y","z","vertexNormals","applyMatrix4","b","Face4","calculateProperties","subtract","other_tree","invert","clipTo","build","allPolygons","union","intersect","toGeometry","j","polygon_vertice_count","vertex_idx_a","vertex_idx_b","vertex_idx_c","verticeUvs","getInverse","polygon_count","vertice_dict","uv","Vector3","normal","toMesh","material","position","setFromMatrixPosition","rotation","setFromRotationMatrix","w","Array","undefined","cross","normalize","dot","vertice_count","flip","multiplyScalar","classifyVertex","side_value","classifySide","classification","num_positive","num_negative","splitPolygon","coplanar_front","coplanar_back","front","back","ti","tj","vi","vj","v","f","interpolate","scalar","Math","sqrt","lerp","sub","other","e","elements","divider","isConvex","slice","concat","node","temp","clipPolygons","insert","input","partData","getPart","obj3d","src","translate","set","features_plane","plane","PlaneGeometry","MeshPhongMaterial","color","transparent","opacity","doubleSided","PathToShape","path","shape","Shape","start","moveTo","lineTo","mesh_THREE","phong","MeshStandardMaterial","MeshBasicMaterial","wireframe","red","Color","extrude_THREE","extrude","selectById","sketchId","amount","target","_path","pathCompiled","_shape","ExtrudeGeometry","bevelEnabled","_mesh","pattern","times","direction","targetMesh","newMesh","translateX","translateY","translateZ","isString","String","lines_normal","LineBasicMaterial","sketchPath_THREE","sketchArray_THREE","sketchArray","points","ShapeGeometry","emissive","side","DoubleSide","flatShading","sketchPoint_THREE","sketchCircle_THREE","sketch_THREE","sketchFeatures","point","getPoints","BufferGeometry","setFromPoints","Line","CircleGeometry","shift","LineLoop","patharray","circle","blue","geometry2","fill","visible","lines","sketch","_children","child","first","resp","cut_THREE","cut","toBeCutted","meshExtrude","bspToKeep","bspRemove","computeVertexNormals","edges","EdgesGeometry","line","LineSegments"],"mappings":"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","file":"parametric.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import Lib from './lib'\n\nexport function create (args) {\n//   console.log('He')\n  return new Lib(args)\n}\n\nexport default Lib\n\n// module.exports = main\n// Node compatible\n// module.exports = YCAD\n","// import build from '../package.json'\n// Features\nimport * as features from './features'\nimport settings from './settings'\nimport { slugify } from './helpers/slugify'\nimport ThreeBSP from './web/ThreeCSG/ThreeCSG.es6'\n\nconst {THREE} = window\n\nexport default function ({ cad, scene }) {\n// const name = 'ParametricJS'\n  // console.log(`${name} [version ${build.version}]`, features)\n\n  // Private\n  var debug = false\n  var cadData = cad\n  let object3d = new THREE.Object3D()\n  const self = this\n\n  // Public\n  Object.assign(this, {\n    render,\n    change,\n    compile,\n    getFeatureById,\n    getPartById,\n    getParametersDefault,\n    getParameters,\n    getFeatureLabels,\n    settings\n    // update\n  })\n\n  // TODO -- better performance with delta updates?\n  // function update (_cadData) {\n  //   cadData = _cadData\n  //   return render()\n  // }\n\n  function render (_cadData = false) {\n    if (_cadData) {\n      cadData = _cadData\n    }\n\n    // Full rerender\n    object3d = new THREE.Object3D()\n\n    if (!cadData) { return console.warn('No CadData') }\n\n    // Compile global cad parameters (adds cadData._parameters)\n    compileParameters()\n\n    const { features } = cadData\n    features.map((feature, key) => {\n      if (feature.suppress) {\n        return\n      }\n      const { mesh } = processFeature(feature) || {}\n\n      // Add mesh to object3d aka the part\n      if (mesh) {\n        object3d.add(mesh)\n      }\n    })\n\n    object3d.name = slugify(cadData.name) || slugify(cadData.title) || 'unnamed'\n\n    return object3d\n  }\n\n  function getFeature (feature) {\n    const { type } = feature\n    return features[type] || false\n\n    // Future?\n    // return features.filter((elem, key) => { return (key == type) ? elem : false })\n  }\n\n  function processFeature (feature = {}) {\n    const { type } = feature\n    const payload = { ycad: self, ThreeBSP, cadData, scene, feature, object3d }\n\n    // console.log(feature)\n\n    // Find handler according to type\n    const handler = getFeature(feature)\n\n    if (!handler) {\n      console.log(`Unknown feature: \"${type}\"`)\n      // TODO Perhaps a Y3D handler?\n      return // y3d.add(feature)\n    }\n\n    // Execute\n    try {\n      let mesh = handler(payload) || {}\n      mesh.name = mesh.name || type\n      return mesh\n    } catch (err) {\n      console.warn(err)\n    }\n  }\n\n  function getFeatureById (id) {\n    return cadData.features.filter((elem) => { return elem.id === id ? elem : false })[0]\n  }\n\n  function getPartById (id) {\n    if (!cadData.parts) {\n      console.warn(`No sub part defined`)\n      return false\n    }\n    return cadData.parts.filter((elem) => { return elem.id === id ? elem : false })[0]\n  }\n\n  function getParameters () { return cadData.parameters || {} }\n\n  function getFeatureLabels () {\n    let ret = []\n    for (let k in cadData.features) {\n      let feature = cadData.features[k]\n      let type = feature.type\n\n      // TODO Recursive?\n      if (type === 'insert') {\n        let part = getPartById(feature.data.selectInnerPart)\n        let featureLabels = getFeatureLabelsOneLevel(part.features)\n        ret.push({ label: part.title, children: featureLabels })\n      } else {\n        ret.push({ label: feature.type })\n      }\n    }\n    return ret\n  }\n\n  function getFeatureLabelsOneLevel (features) {\n    let ret = []\n    for (let k in features) {\n      let feature = features[k]\n      ret.push({ label: feature.type })\n    }\n    return ret\n  }\n\n  // Returns only the default values as an object\n  function getParametersDefault () {\n    let ret = {}\n    for (let k in cadData.parameters) {\n      ret[k] = cadData.parameters[k].default || cadData.parameters[k]\n    }\n    return ret\n  }\n\n  function compileParameters () {\n    if (!cadData) { return console.warn('No CadData') }\n    let compiled = ''\n    const { parameters } = cadData\n\n    parameters || [].map((elem, key) => {\n      const value = parameters[key]\n      compiled += `let ${key} = ${value};`\n    })\n\n    // save compile to feature\n    cadData._parameters = compiled // || \"height=10;width=3;thickness=1\";\n    return compiled\n  }\n\n  // Use to change a parameter\n  function change (varname, value) {\n    // Set\n    cadData.parameters[varname] = value\n\n    // Remove old render?\n    object3d.children.splice(0, 1)\n\n    // Render again\n    render()\n  }\n\n  // Makes sure a parameter is always an object with default, min, max props\n  // function getParameter (parameter) {\n  //   if (typeof parameter === 'object') {\n  //     return parameter\n  //   }\n  //   return { default: parameter }\n  // }\n\n  function compile (what) {\n    let parameters = `\n      let throughall = 1000;\n      ${cadData._parameters}; \\n \n      ${what}\n      `\n\n    if (debug) console.log(`Compiling : ${parameters}`)\n    return eval(parameters)\n  }\n}\n","export function slugify (text) {\n  if (!text) return false\n\n  return text.toString().toLowerCase()\n    .replace(/\\s+/g, '-') // Replace spaces with -\n    .replace(/[^\\w\\-]+/g, '') // Remove all non-word chars\n    .replace(/\\-\\-+/g, '-') // Replace multiple - with single -\n    .replace(/^-+/, '') // Trim - from start of text\n    .replace(/-+$/, '') // Trim - from end of text\n}\n","export default {\n  sketchFill: false\n}\n","/* jshint esversion: 6 */\n\nconst EPSILON = 1e-5,\n  COPLANAR = 0,\n  FRONT = 1,\n  BACK = 2,\n  SPANNING = 3\n\nexport default class ThreeBSP {\n  constructor (geometry) {\n    // Convert THREE.Geometry to ThreeBSP\n    var i, _length_i,\n      face, vertex, faceVertexUvs, uvs,\n      polygon,\n      polygons = [],\n      tree\n\n        this.Polygon = Polygon\n        this.Vertex = Vertex\n        this.Node = Node\n        if (geometry instanceof THREE.Geometry) {\n      this.matrix = new THREE.Matrix4()\n        } else if (geometry instanceof THREE.Mesh) {\n      // #todo: add hierarchy support\n      geometry.updateMatrix()\n            this.matrix = geometry.matrix.clone()\n            geometry = geometry.geometry\n        } else if (geometry instanceof Node) {\n      this.tree = geometry\n            this.matrix = new THREE.Matrix4()\n            return this\n        } else {\n      throw 'ThreeBSP: Given geometry is unsupported'\n        }\n\n    for (i = 0, _length_i = geometry.faces.length; i < _length_i; i++) {\n      face = geometry.faces[i]\n            faceVertexUvs = geometry.faceVertexUvs[0][i]\n            polygon = new Polygon()\n\n            if (face instanceof THREE.Face3) {\n        vertex = geometry.vertices[face.a]\n                uvs = faceVertexUvs ? new THREE.Vector2(faceVertexUvs[0].x, faceVertexUvs[0].y) : null\n                vertex = new Vertex(vertex.x, vertex.y, vertex.z, face.vertexNormals[0], uvs)\n                vertex.applyMatrix4(this.matrix)\n                polygon.vertices.push(vertex)\n\n                vertex = geometry.vertices[face.b]\n                uvs = faceVertexUvs ? new THREE.Vector2(faceVertexUvs[1].x, faceVertexUvs[1].y) : null\n                vertex = new Vertex(vertex.x, vertex.y, vertex.z, face.vertexNormals[1], uvs)\n                vertex.applyMatrix4(this.matrix)\n                polygon.vertices.push(vertex)\n\n                vertex = geometry.vertices[face.c]\n                uvs = faceVertexUvs ? new THREE.Vector2(faceVertexUvs[2].x, faceVertexUvs[2].y) : null\n                vertex = new Vertex(vertex.x, vertex.y, vertex.z, face.vertexNormals[2], uvs)\n                vertex.applyMatrix4(this.matrix)\n                polygon.vertices.push(vertex)\n            } else if (typeof THREE.Face4) {\n        vertex = geometry.vertices[face.a]\n                uvs = faceVertexUvs ? new THREE.Vector2(faceVertexUvs[0].x, faceVertexUvs[0].y) : null\n                vertex = new Vertex(vertex.x, vertex.y, vertex.z, face.vertexNormals[0], uvs)\n                vertex.applyMatrix4(this.matrix)\n                polygon.vertices.push(vertex)\n\n                vertex = geometry.vertices[face.b]\n                uvs = faceVertexUvs ? new THREE.Vector2(faceVertexUvs[1].x, faceVertexUvs[1].y) : null\n                vertex = new Vertex(vertex.x, vertex.y, vertex.z, face.vertexNormals[1], uvs)\n                vertex.applyMatrix4(this.matrix)\n                polygon.vertices.push(vertex)\n\n                vertex = geometry.vertices[face.c]\n                uvs = faceVertexUvs ? new THREE.Vector2(faceVertexUvs[2].x, faceVertexUvs[2].y) : null\n                vertex = new Vertex(vertex.x, vertex.y, vertex.z, face.vertexNormals[2], uvs)\n                vertex.applyMatrix4(this.matrix)\n                polygon.vertices.push(vertex)\n\n                vertex = geometry.vertices[face.d]\n                uvs = faceVertexUvs ? new THREE.Vector2(faceVertexUvs[3].x, faceVertexUvs[3].y) : null\n                vertex = new Vertex(vertex.x, vertex.y, vertex.z, face.vertexNormals[3], uvs)\n                vertex.applyMatrix4(this.matrix)\n                polygon.vertices.push(vertex)\n            } else {\n        throw 'Invalid face type at index ' + i\n            }\n\n      polygon.calculateProperties()\n            polygons.push(polygon)\n        }\n\n    this.tree = new Node(polygons)\n    }\n\n  subtract (other_tree) {\n    var a = this.tree.clone(),\n      b = other_tree.tree.clone()\n\n        a.invert()\n        a.clipTo(b)\n        b.clipTo(a)\n        b.invert()\n        b.clipTo(a)\n        b.invert()\n        a.build(b.allPolygons())\n        a.invert()\n        a = new ThreeBSP(a)\n        a.matrix = this.matrix\n        return a\n    }\n\n  union (other_tree) {\n    var a = this.tree.clone(),\n      b = other_tree.tree.clone()\n\n        a.clipTo(b)\n        b.clipTo(a)\n        b.invert()\n        b.clipTo(a)\n        b.invert()\n        a.build(b.allPolygons())\n        a = new ThreeBSP(a)\n        a.matrix = this.matrix\n        return a\n    }\n\n  intersect (other_tree) {\n    var a = this.tree.clone(),\n      b = other_tree.tree.clone()\n\n        a.invert()\n        b.clipTo(a)\n        b.invert()\n        a.clipTo(b)\n        b.clipTo(a)\n        a.build(b.allPolygons())\n        a.invert()\n        a = new ThreeBSP(a)\n        a.matrix = this.matrix\n        return a\n    }\n\n  toGeometry () {\n    var i, j,\n      matrix = new THREE.Matrix4().getInverse(this.matrix),\n      geometry = new THREE.Geometry(),\n      polygons = this.tree.allPolygons(),\n      polygon_count = polygons.length,\n      polygon, polygon_vertice_count,\n      vertice_dict = {},\n      vertex_idx_a, vertex_idx_b, vertex_idx_c,\n      vertex, face,\n      verticeUvs\n\n        for (i = 0; i < polygon_count; i++) {\n      polygon = polygons[i]\n            polygon_vertice_count = polygon.vertices.length\n\n            for (j = 2; j < polygon_vertice_count; j++) {\n        verticeUvs = []\n\n                vertex = polygon.vertices[0]\n                verticeUvs.push(new THREE.Vector2(vertex.uv.x, vertex.uv.y))\n                vertex = new THREE.Vector3(vertex.x, vertex.y, vertex.z)\n                vertex.applyMatrix4(matrix)\n\n                if (typeof vertice_dict[vertex.x + ',' + vertex.y + ',' + vertex.z] !== 'undefined') {\n          vertex_idx_a = vertice_dict[vertex.x + ',' + vertex.y + ',' + vertex.z]\n                } else {\n          geometry.vertices.push(vertex)\n                    vertex_idx_a = vertice_dict[vertex.x + ',' + vertex.y + ',' + vertex.z] = geometry.vertices.length - 1\n                }\n\n        vertex = polygon.vertices[j - 1]\n                verticeUvs.push(new THREE.Vector2(vertex.uv.x, vertex.uv.y))\n                vertex = new THREE.Vector3(vertex.x, vertex.y, vertex.z)\n                vertex.applyMatrix4(matrix)\n                if (typeof vertice_dict[vertex.x + ',' + vertex.y + ',' + vertex.z] !== 'undefined') {\n          vertex_idx_b = vertice_dict[vertex.x + ',' + vertex.y + ',' + vertex.z]\n                } else {\n          geometry.vertices.push(vertex)\n                    vertex_idx_b = vertice_dict[vertex.x + ',' + vertex.y + ',' + vertex.z] = geometry.vertices.length - 1\n                }\n\n        vertex = polygon.vertices[j]\n                verticeUvs.push(new THREE.Vector2(vertex.uv.x, vertex.uv.y))\n                vertex = new THREE.Vector3(vertex.x, vertex.y, vertex.z)\n                vertex.applyMatrix4(matrix)\n                if (typeof vertice_dict[vertex.x + ',' + vertex.y + ',' + vertex.z] !== 'undefined') {\n          vertex_idx_c = vertice_dict[vertex.x + ',' + vertex.y + ',' + vertex.z]\n                } else {\n          geometry.vertices.push(vertex)\n                    vertex_idx_c = vertice_dict[vertex.x + ',' + vertex.y + ',' + vertex.z] = geometry.vertices.length - 1\n                }\n\n        face = new THREE.Face3(\n          vertex_idx_a,\n          vertex_idx_b,\n          vertex_idx_c,\n          new THREE.Vector3(polygon.normal.x, polygon.normal.y, polygon.normal.z)\n        )\n\n                geometry.faces.push(face)\n                geometry.faceVertexUvs[0].push(verticeUvs)\n            }\n    }\n    return geometry\n    }\n\n  toMesh (material) {\n    var geometry = this.toGeometry(),\n      mesh = new THREE.Mesh(geometry, material)\n\n        mesh.position.setFromMatrixPosition(this.matrix)\n        mesh.rotation.setFromRotationMatrix(this.matrix)\n\n        return mesh\n    }\n}\nclass Polygon {\n  constructor (vertices, normal, w) {\n    if (!(vertices instanceof Array)) {\n      vertices = []\n        }\n\n    this.vertices = vertices\n        if (vertices.length > 0) {\n      this.calculateProperties()\n        } else {\n      this.normal = this.w = undefined\n        }\n  }\n\n  calculateProperties () {\n    var a = this.vertices[0],\n      b = this.vertices[1],\n      c = this.vertices[2]\n\n        this.normal = b.clone().subtract(a).cross(\n      c.clone().subtract(a)\n    ).normalize()\n\n        this.w = this.normal.clone().dot(a)\n\n        return this\n    }\n\n  clone () {\n    var i, vertice_count,\n      polygon = new Polygon()\n\n        for (i = 0, vertice_count = this.vertices.length; i < vertice_count; i++) {\n      polygon.vertices.push(this.vertices[i].clone())\n        }\n    polygon.calculateProperties()\n\n        return polygon\n    }\n\n  flip () {\n    var i, vertices = []\n\n        this.normal.multiplyScalar(-1)\n        this.w *= -1\n\n        for (i = this.vertices.length - 1; i >= 0; i--) {\n      vertices.push(this.vertices[i])\n        }\n    this.vertices = vertices\n\n        return this\n    }\n\n  classifyVertex (vertex) {\n    var side_value = this.normal.dot(vertex) - this.w\n\n        if (side_value < -EPSILON) {\n      return BACK\n        } else if (side_value > EPSILON) {\n      return FRONT\n        } else {\n      return COPLANAR\n        }\n  }\n\n  classifySide (polygon) {\n    var i, vertex, classification,\n      num_positive = 0,\n      num_negative = 0,\n      vertice_count = polygon.vertices.length\n\n        for (i = 0; i < vertice_count; i++) {\n      vertex = polygon.vertices[i]\n            classification = this.classifyVertex(vertex)\n            if (classification === FRONT) {\n        num_positive++\n            } else if (classification === BACK) {\n        num_negative++\n            }\n    }\n\n    if (num_positive > 0 && num_negative === 0) {\n      return FRONT\n        } else if (num_positive === 0 && num_negative > 0) {\n      return BACK\n        } else if (num_positive === 0 && num_negative === 0) {\n      return COPLANAR\n        } else {\n      return SPANNING\n        }\n  }\n\n  splitPolygon (polygon, coplanar_front, coplanar_back, front, back) {\n    var classification = this.classifySide(polygon)\n\n        if (classification === COPLANAR) {\n      (this.normal.dot(polygon.normal) > 0 ? coplanar_front : coplanar_back).push(polygon)\n\n        } else if (classification === FRONT) {\n      front.push(polygon)\n\n        } else if (classification === BACK) {\n      back.push(polygon)\n\n        } else {\n      var vertice_count,\n        i, j, ti, tj, vi, vj,\n        t, v,\n        f = [],\n        b = []\n\n            for (i = 0, vertice_count = polygon.vertices.length; i < vertice_count; i++) {\n        j = (i + 1) % vertice_count\n                vi = polygon.vertices[i]\n                vj = polygon.vertices[j]\n                ti = this.classifyVertex(vi)\n                tj = this.classifyVertex(vj)\n\n                if (ti != BACK) f.push(vi)\n                if (ti != FRONT) b.push(vi)\n                if ((ti | tj) === SPANNING) {\n          t = (this.w - this.normal.dot(vi)) / this.normal.dot(vj.clone().subtract(vi))\n                    v = vi.interpolate(vj, t)\n                    f.push(v)\n                    b.push(v)\n                }\n      }\n\n      if (f.length >= 3) front.push(new Polygon(f).calculateProperties())\n            if (b.length >= 3) back.push(new Polygon(b).calculateProperties())\n        }\n  }\n}\nclass Vertex {\n  constructor (x, y, z, normal, uv) {\n    this.x = x\n        this.y = y\n        this.z = z\n        this.normal = normal || new THREE.Vector3()\n        this.uv = uv || new THREE.Vector2()\n    }\n\n  clone () {\n    return new Vertex(this.x, this.y, this.z, this.normal.clone(), this.uv.clone())\n    }\n\n  add (vertex) {\n    this.x += vertex.x\n        this.y += vertex.y\n        this.z += vertex.z\n        return this\n    }\n\n  subtract (vertex) {\n    this.x -= vertex.x\n        this.y -= vertex.y\n        this.z -= vertex.z\n        return this\n    }\n\n  multiplyScalar (scalar) {\n    this.x *= scalar\n        this.y *= scalar\n        this.z *= scalar\n        return this\n    }\n\n  cross (vertex) {\n    var x = this.x,\n      y = this.y,\n      z = this.z\n\n        this.x = y * vertex.z - z * vertex.y\n        this.y = z * vertex.x - x * vertex.z\n        this.z = x * vertex.y - y * vertex.x\n\n        return this\n    }\n\n  normalize () {\n    var length = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z)\n\n        this.x /= length\n        this.y /= length\n        this.z /= length\n\n        return this\n    }\n\n  dot (vertex) {\n    return this.x * vertex.x + this.y * vertex.y + this.z * vertex.z\n    }\n\n  lerp (a, t) {\n    this.add(\n      a.clone().subtract(this).multiplyScalar(t)\n    )\n\n        this.normal.add(\n      a.normal.clone().sub(this.normal).multiplyScalar(t)\n    )\n\n        this.uv.add(\n      a.uv.clone().sub(this.uv).multiplyScalar(t)\n    )\n\n        return this\n    }\n\n  interpolate (other, t) {\n    return this.clone().lerp(other, t)\n    }\n\n  applyMatrix4 (m) {\n    // input: THREE.Matrix4 affine matrix\n\n    var x = this.x,\n      y = this.y,\n      z = this.z\n\n        var e = m.elements\n\n        this.x = e[0] * x + e[4] * y + e[8] * z + e[12]\n        this.y = e[1] * x + e[5] * y + e[9] * z + e[13]\n        this.z = e[2] * x + e[6] * y + e[10] * z + e[14]\n\n        return this\n\n    }\n}\nclass Node {\n  constructor (polygons) {\n    var i, polygon_count,\n      front = [],\n      back = []\n\n        this.polygons = []\n        this.front = this.back = undefined\n\n        if (!(polygons instanceof Array) || polygons.length === 0) return\n\n        this.divider = polygons[0].clone()\n\n        for (i = 0, polygon_count = polygons.length; i < polygon_count; i++) {\n      this.divider.splitPolygon(polygons[i], this.polygons, this.polygons, front, back)\n        }\n\n    if (front.length > 0) {\n      this.front = new Node(front)\n        }\n\n    if (back.length > 0) {\n      this.back = new Node(back)\n        }\n  }\n\n  isConvex (polygons) {\n    var i, j\n        for (i = 0; i < polygons.length; i++) {\n      for (j = 0; j < polygons.length; j++) {\n        if (i !== j && polygons[i].classifySide(polygons[j]) !== BACK) {\n          return false\n                }\n      }\n    }\n    return true\n    }\n\n  build (polygons) {\n    var i, polygon_count,\n      front = [],\n      back = []\n\n        if (!this.divider) {\n      this.divider = polygons[0].clone()\n        }\n\n    for (i = 0, polygon_count = polygons.length; i < polygon_count; i++) {\n      this.divider.splitPolygon(polygons[i], this.polygons, this.polygons, front, back)\n        }\n\n    if (front.length > 0) {\n      if (!this.front) this.front = new Node()\n            this.front.build(front)\n        }\n\n    if (back.length > 0) {\n      if (!this.back) this.back = new Node()\n            this.back.build(back)\n        }\n  }\n\n  allPolygons () {\n    var polygons = this.polygons.slice()\n        if (this.front) polygons = polygons.concat(this.front.allPolygons())\n        if (this.back) polygons = polygons.concat(this.back.allPolygons())\n        return polygons\n    }\n\n  clone () {\n    var node = new Node()\n\n        node.divider = this.divider.clone()\n        node.polygons = this.polygons.map(function (polygon) {\n      return polygon.clone()\n        })\n        node.front = this.front && this.front.clone()\n        node.back = this.back && this.back.clone()\n\n        return node\n    }\n\n  invert () {\n    var i, polygon_count, temp\n\n        for (i = 0, polygon_count = this.polygons.length; i < polygon_count; i++) {\n      this.polygons[i].flip()\n        }\n\n    this.divider.flip()\n        if (this.front) this.front.invert()\n        if (this.back) this.back.invert()\n\n        temp = this.front\n        this.front = this.back\n        this.back = temp\n\n        return this\n    }\n\n  clipPolygons (polygons) {\n    var i, polygon_count,\n      front, back\n\n        if (!this.divider) return polygons.slice()\n\n        front = []\n        back = []\n\n        for (i = 0, polygon_count = polygons.length; i < polygon_count; i++) {\n      this.divider.splitPolygon(polygons[i], front, back, front, back)\n        }\n\n    if (this.front) front = this.front.clipPolygons(front)\n        if (this.back) back = this.back.clipPolygons(back)\n        else back = []\n\n        return front.concat(back)\n    }\n\n  clipTo (node) {\n    this.polygons = node.clipPolygons(this.polygons)\n        if (this.front) this.front.clipTo(node)\n        if (this.back) this.back.clipTo(node)\n    }\n}\n\nwindow.ThreeBSP = ThreeBSP\n","import Part from '../index'\n\nexport default function insert (input) {\n  let { ycad, cadData, feature, object3d } = input\n  // console.log(ycad)\n\n  let partData = ycad.getPart(feature.data.selectInnerPart)\n  let part = new Part(partData)\n  let obj3d = part.render()\n\n  // Translate?\n  let translate = feature.data.translate\n  console.log(feature.data)\n  if (translate) {\n    let { x, y, z } = translate\n    console.log(translate)\n    obj3d.position.set(x, y, z)\n  }\n\n  scene.add(obj3d)\n}\n","export default function (input) {\n  let { ycad, cadData, scene, feature, object3d } = input\n\n  // var color = 0x8080f0\n  let plane = new THREE.Mesh(\n    new THREE.PlaneGeometry(10, 10),\n    new THREE.MeshPhongMaterial({ color: 0x0000ff, transparent: true, opacity: 0.2 }))\n  plane.doubleSided = true\n  // plane.position.x = 100;\n  // plane.rotation.z = 2;  // Not sure what this number represents.\n  scene.add(plane)\n}\n","/*\n    [\n                        { x: 0, y: 0 },\n                        { x: 10, y: 0 },\n                        { x: 10, y: 10},\n                        { x: 0, y: 10 },\n                        { x: 0, y: 0 } //close\n                    ] =>\n        var triangleShape = new THREE.Shape();\n        triangleShape.moveTo(80, 20);\n        triangleShape.lineTo(40, 80);\n        triangleShape.lineTo(120, 80);\n        triangleShape.lineTo(80, 20); // close path\n    */\n\nexport default function PathToShape (path) {\n  let shape = new THREE.Shape()\n  let start = path[0]\n  shape.moveTo(start.x, start.y)\n  for (let k in path) {\n    let p = path[k]\n    shape.lineTo(p.x, p.y)\n  }\n  shape.lineTo(path[0].x, path[0].y) // Close\n  return shape\n}\n","const {THREE} = window\n// https://threejs.org/docs/scenes/material-browser.html#MeshBasicMaterial\nconst color =\n    0x1976d2\n    // new THREE.Color('cyan')\n\nconst depthBlue = new THREE.MeshStandardMaterial({ color })\nconst phong = new THREE.MeshPhongMaterial({ color })\nconst wireframe = new THREE.MeshBasicMaterial({ color, wireframe: true })\nconst deluxe = new THREE.MeshStandardMaterial({ color })\n\n// Exports\n// export const wireframe\nexport const normal = phong\nexport const blue = new THREE.MeshPhongMaterial({ color: color })\nexport const transparent = new THREE.MeshPhongMaterial({\n  color: color,\n  // alphaMap: 0.5\n  transparent: true,\n  opacity: 0.5\n})\nexport const red = new THREE.MeshPhongMaterial({ color: new THREE.Color('red') })\n","import PathToShape from '../helpers/PathToShape'\nimport { red } from './materials/mesh.js'\nconst {THREE} = window\n\nexport default function extrude (input) {\n  const { ycad, feature } = input\n  const { compile, getFeatureById } = ycad\n  const { selectById, sketchId } = feature\n  const { id, amount } = feature\n  // Optional settings\n  // const { bevelEnabled, bevelSegments, steps, bevelSize, bevelThickness } = feature\n\n  //   const { settings: extrudeSettings } = feature\n  //   // Compatibility mode: Old Format\n  //   if (extrudeSettings) {\n  //     const { amount, bevelEnabled, bevelSegments, steps, bevelSize, bevelThickness } = extrudeSettings\n  //   }\n\n  // Compile parametric fields\n\n  // Create copy of settings\n  let _data = Object.create(feature)\n\n  // Compile Extrude settings?\n  _data.amount = compile(amount)\n\n  const target = getFeatureById(selectById || sketchId)\n\n  if (!target) {\n    console.warn(`[extrude] couldnt find suitable path to extrude`, feature)\n    return\n  }\n\n  // Use static sketch or parametric sketch?\n  const { path, _path: pathCompiled } = target\n\n  // Get Shape\n  const shape = feature._shape || PathToShape(path || pathCompiled)\n\n  // Debug\n  // console.log(`Extruding with ${amount}`)\n\n  // Extrude\n  // const extrudeSettingsMerged = Object.assign(extrudeSettings, { amount: 8, bevelEnabled: false, bevelSegments: 2, steps: 2, bevelSize: 0, bevelThickness: 1 })\n  const material = red\n  const geometry = new THREE.ExtrudeGeometry(shape, { amount, bevelEnabled: false })\n  const mesh = new THREE.Mesh(geometry, material)\n\n  // Attach mesh to the feature\n  mesh.name = `[extrude]${id}`\n  feature._mesh = mesh\n\n  return { mesh }\n}\n","/*\n {\n        type: 'pattern',\n        selectById: 'extrude1',\n        settings: {\n            times: 4,\n            direction: [10, 0, 0]\n        }\n    }\n*/\n\nexport default function pattern ({ ycad, cadData, scene, feature, object3d }) {\n  const { compile, getFeatureById } = ycad\n  const { selectById, sketchId, settings } = feature\n  const { times, direction } = settings\n  const [x, y, z] = direction\n\n  // Get Feature\n  const target = getFeatureById(selectById)\n  const targetMesh = target._mesh\n\n  // Clone\n  for (let i = 0; i < times; i++) {\n    // console.log(\"Creating copy\")\n\n    var newMesh = targetMesh.clone()\n    newMesh.translateX(x * i)\n    newMesh.translateY(y * i)\n    newMesh.translateZ(z * i)\n\n    object3d.add(newMesh)\n  }\n\n  // Debug\n  // console.log(target)\n  // console.log(\"Work in progress\")\n\n  // Attach mesh to feature\n  feature._mesh = object3d\n}\n","export default function isString (x) {\n  return x !== null && x !== undefined && x.constructor === String\n}\n","export const normal = new THREE.LineBasicMaterial({ color: 0x000000 })\nexport const inverted = new THREE.LineBasicMaterial({ color: 0xffffff })\nexport const blue = new THREE.LineBasicMaterial({ color: new THREE.Color('blue') })\nexport const red = new THREE.LineBasicMaterial({ color: new THREE.Color('red') })\n","import isString from '../helpers/isString'\nimport PathToShape from '../helpers/PathToShape'\nimport { normal } from './materials/lines.js'\nconst {THREE} = window\n\nexport function sketchPath (input) {\n  const material = normal\n  const { ycad, scene, feature } = input\n  const { compile } = ycad\n  const { path, plane } = feature\n  const { sketchFill } = ycad.settings\n\n  console.log(`Creating sketch on plane \"${plane}\"`, feature)\n\n  // Create rendered sketch\n  let _path = [] // Create a compiled version\n  path.map((point) => {\n    const { x, y } = point\n    _path.push({\n      x: isString(x) ? compile(x) : x,\n      y: isString(y) ? compile(y) : y\n    })\n  })\n\n  // Finalize\n  const shape = PathToShape(path) // TODO --speed || pathCompiled)\n  feature._path = _path\n  feature._shape = shape\n\n  // Draw sketch\n  var points = shape.getPoints()\n  var geometry = new THREE.BufferGeometry().setFromPoints(points)\n  var lines = new THREE.Line(geometry, material)\n\n  // Place the sketch\n  // lines.rotateX(THREE.Math.degToRad(90))\n  // mesh.rotateY(0)\n  // mesh.rotateZ(0)\n\n  // Fill shape\n  // if (sketchFill) {\n  //   var geometry2 = new THREE.ShapeGeometry(shape)\n  //   var material2 = new THREE.MeshPhongMaterial({\n  //     color: Math.random() * 0xffffff,\n  //     emissive: 0x072534,\n  //     side: THREE.DoubleSide,\n  //     flatShading: true\n  //   })\n  //   var mesh = new THREE.Mesh(geometry2, material2)\n  //   scene.add(mesh)\n  // }\n\n  // scene.add(lines)\n  return { mesh: lines }\n}\n","/*\nhttps://threejs.org/docs/#api/extras/core/Shape\nhttps://threejs.org/docs/#api/geometries/ShapeGeometry\n{\n    id: 'heart',\n    type: 'sketcharray',\n    path: [\n        ['moveTo', 25, 25],\n        ['bezierCurveTo', 25, 25, 20, 0, 0, 0],\n        ['bezierCurveTo', 30, 0, 30, 35, 30, 35],\n        ['bezierCurveTo', 30, 55, 10, 77, 25, 95],\n        ['bezierCurveTo', 60, 77, 80, 55, 80, 35],\n        ['bezierCurveTo', 80, 35, 80, 0, 50, 0],\n        ['bezierCurveTo', 35, 0, 25, 25, 25, 25]\n    ]\n}\n*/\n\nconst {THREE} = window\n\nexport function sketchArray (input) {\n  const { feature } = input\n  const { path } = feature\n\n  // console.log(`Creating sketch on plane \"${plane}\"`)\n  // console.log(path)\n\n  var shape = new THREE.Shape()\n\n  path.map((elem) => {\n    // console.log(elem)\n    const [type, ...points] = elem\n    shape[type](...points)\n  })\n\n  var geometry = new THREE.ShapeGeometry(shape)\n  var material = new THREE.MeshPhongMaterial({\n    color: 0x156289,\n    emissive: 0x072534,\n    side: THREE.DoubleSide,\n    flatShading: true\n  })\n  var mesh = new THREE.Mesh(geometry, material)\n  return {mesh}\n}\n","const {THREE} = window\n\nexport function sketchPoint (input) {\n  const {x = 0, y = 0, r = 0.1} = input.feature\n\n  const geometry = new THREE.CircleGeometry(r, 32)\n\n  // Remove center vertex\n  geometry.vertices.shift()\n\n  geometry.vertices.push(new THREE.Vector3(0.1, 0, 0))\n  geometry.vertices.push(new THREE.Vector3(-0.1, 0, 0))\n  geometry.vertices.push(new THREE.Vector3(0, 0.1, 0))\n  geometry.vertices.push(new THREE.Vector3(0, -0.1, 0))\n\n  const material = new THREE.MeshBasicMaterial({ color: 0x000000 })\n  const mesh = new THREE.LineLoop(geometry, material)\n  mesh.position.x = x\n  mesh.position.y = y\n\n  // const mesh = new THREE.LineSegments(\n  //   new THREE.Geometry(),\n  //   new THREE.LineBasicMaterial({\n  //     color: 0x000fff,\n  //     transparent: true,\n  //     opacity: 0.5\n  //   })\n  // )\n\n  return { mesh }\n}\n","// https://threejs.org/docs/#api/geometries/CircleGeometry\n\nconst {THREE} = window\n\nexport function sketchCircle (input) {\n  const {feature} = input\n  const {name} = feature\n  const {x = 0, y = 0, r = 1} = feature\n\n  // Create new material\n  const material = new THREE.MeshBasicMaterial({ color: 0x000000 })\n  const blue = new THREE.MeshPhongMaterial({\n    color: 0x156289,\n    emissive: 0x072534,\n    side: THREE.DoubleSide,\n    flatShading: true\n  })\n\n  // Geo\n  const geometry = new THREE.CircleGeometry(r, 32)\n  const geometry2 = new THREE.CircleGeometry(r, 32)\n\n  // const mesh = new THREE.LineLoop(geometry, material)\n\n  const mesh = new THREE.Object3D()\n\n  const fill = new THREE.Mesh(geometry, blue)\n  fill.name = 'fill'\n  fill.visible = false\n  mesh.add(fill)\n\n  // Remove center vertex\n  geometry2.vertices.shift()\n  const lines = new THREE.LineLoop(geometry2, material)\n  lines.name = 'lines'\n  mesh.add(lines)\n\n  // Pos\n  mesh.position.x = x\n  mesh.position.y = y\n  mesh.name = name || 'circle'\n  return { mesh }\n}\n\n// var geometry = new THREE.CircleGeometry(5, 32)\n// var material = new THREE.MeshBasicMaterial({ color: 0xffff00 })\n// var circle = new THREE.Mesh(geometry, material)\n// scene.add(circle)\n\n// mesh.add(new THREE.LineSegments(\n//   geometry,\n//   new THREE.LineBasicMaterial({\n//     color: 0xffffff,\n//     transparent: true,\n//     opacity: 0.5\n//   })\n// ))\n\n// mesh.add(new THREE.Mesh(\n//   geometry,\n//   new THREE.MeshPhongMaterial({\n//     color: 0x156289,\n//     emissive: 0x072534,\n//     side: THREE.DoubleSide,\n//     flatShading: true\n//   })\n// ))\n","import { sketchPath } from './sketchPath'\nimport { sketchArray } from './sketchArray'\nimport { sketchPoint } from './sketchPoint'\nimport { sketchCircle } from './sketchCircle'\nconst {THREE} = window\n\nconst sketchFeatures = {\n  path: sketchPath,\n  point: sketchPoint,\n  patharray: sketchArray,\n  circle: sketchCircle\n}\n\nexport default function (input) {\n  const { ycad, feature } = input\n  const { children = [] } = feature\n  const { path, plane } = feature\n\n  console.log(`Creating sketch on plane \"${plane}\"`)\n\n  // COMPATIBILITY : Auto promote path to children\n  if (!children && path) {\n    children.push({type: 'path', path: path})\n  }\n\n  // Process sketch children\n  const _children = children.map(child => {\n    let {type} = child\n\n    // DETECT : Auto promote path : path, pathsimpel, patharray\n    if (type === 'path') {\n      const {path} = child\n      const [first] = path\n      // console.log(first)\n      type = (first.constructor === Array) ? 'patharray' : 'path'\n    }\n\n    // Skip suppress\n    const {suppress} = child\n    if (suppress) {\n      return\n    }\n\n    const handler = sketchFeatures[type]\n    if (!handler) {\n      console.warn(`Unknown feature: \"${type}\"`)\n      return\n    }\n\n    // Call sketch feature handler\n    const resp = handler({ ycad, feature: child })\n    const {mesh = {}} = resp\n    return mesh\n  })\n\n  const object3d = new THREE.Object3D()\n  object3d.children = _children.filter(elem => elem)\n  return { mesh: object3d }\n}\n","import extrude from './extrude'\nimport { normal } from './materials/mesh.js'\nconst {THREE} = window\n\nexport default function cut (input) {\n  const { ycad, ThreeBSP, cadData, scene, feature, object3d } = input\n  const { compile, getFeatureById } = ycad\n  const { selectById, sketchId, amount } = feature\n\n  // TODO Find first type = mesh\n  const toBeCutted = object3d.children.filter(elem => elem.type === 'Mesh')[0] // object3d.children[0]\n\n  // First create the extruded mesh (could be geom)\n  const target = getFeatureById(selectById || sketchId)\n  const { mesh: meshExtrude } = extrude(input)\n\n  // return { mesh: meshExtrude }\n\n  // console.log(\"Work in progress\")\n  console.log('Body to be cutted:', toBeCutted)\n  console.log('Body to be extruded:', meshExtrude)\n\n  // Convert to ThreeBSP\n  var bspToKeep = new ThreeBSP(toBeCutted)\n  var bspRemove = new ThreeBSP(meshExtrude)\n  var subtractBsp = bspToKeep.subtract(bspRemove)\n  var mesh = subtractBsp.toMesh(normal)\n  mesh.geometry.computeVertexNormals()\n  object3d.add(mesh)\n\n  // object3d.add(meshExtrude) //The cut\n\n  // Add edges ?\n  var edges = new THREE.EdgesGeometry(mesh.geometry)\n  var line = new THREE.LineSegments(edges, new THREE.LineBasicMaterial({ color: 0x000000 }))\n  scene.add(line)\n\n  // Hide the previous\n  toBeCutted.visible = false\n}\n\n// --------------\n// Snippets\n// --------------\n// function exampleBSP () {\n//   // var start_time = (new Date()).getTime();\n//   var cube_geometry = new THREE.CubeGeometry(3, 3, 3)\n//   var cube_mesh = new THREE.Mesh(cube_geometry)\n//   cube_mesh.position.x = -7\n//   var cube_bsp = new ThreeBSP(cube_mesh)\n//   var sphere_geometry = new THREE.SphereGeometry(1.8, 32, 32)\n//   var sphere_mesh = new THREE.Mesh(sphere_geometry)\n//   sphere_mesh.position.x = -7\n//   var sphere_bsp = new ThreeBSP(sphere_mesh)\n\n//   var subtract_bsp = cube_bsp.subtract(sphere_bsp)\n//   var result = subtract_bsp.toMesh(new THREE.MeshLambertMaterial({\n//     shading: THREE.SmoothShading,\n//     map: new THREE.TextureLoader().load('texture.png')\n//   }))\n//   result.geometry.computeVertexNormals()\n//   scene.add(result)\n//   // console.log('Example 1: ' + ((new Date()).getTime() - start_time) + 'ms');\n// }\n\n// function exampleMerge () {\n//   // Merge example\n//   var ballGeo = new THREE.SphereGeometry(10, 35, 35)\n//   var material = new THREE.MeshPhongMaterial({ color: 0xF7FE2E })\n//   var ball = new THREE.Mesh(ballGeo, material)\n\n//   var pendulumGeo = new THREE.CylinderGeometry(1, 1, 50, 16)\n//   ball.updateMatrix()\n//   pendulumGeo.merge(ball.geometry, ball.matrix)\n\n//   var pendulum = new THREE.Mesh(pendulumGeo, material)\n//   scene.add(pendulum)\n// }\n","import insert from './insert.js'\nimport plane from './plane.js'\nimport extrude from './extrude.js'\nimport pattern from './pattern.js'\nimport sketch from './sketch.js'\nimport cut from './cut.js'\nimport { sketchArray } from './sketchArray'\n\nexport { insert, plane, extrude, pattern, sketch, cut, sketchArray }\n"],"sourceRoot":""}